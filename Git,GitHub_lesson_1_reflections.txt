Reflections

1) How does using diff help?

One doesn't need to compare the files manually as the differences are automatically displayed. 
Helpful in case of large files. While manually comparing such large files, one might miss out detecting a bug(s) in the code and thereby fail to get the code working. 


2) How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

The history of the file will allow access to all the changes made to the code.
Suppose, a section of the code from the previous versions needs to be reinstated in the current version. 
This can be easily done using version control without rewriting the section of the code again. 

A second advantage is that the gradual development/improvement of the code can be seen through the different versions of the code.
This will help us identify efficient programming practices and warn against errors/bugs.  



3) What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

pros of manual commiting
a) control to the user
b) the development of the code can be elucidated clearly

cons 
a) commiting based of the judgement of the user



4) Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Git is targeted mainly for applications invloving many lines of code; wherein files are usually interdependent. 



5) How can you use the commands git log and git diff to view the history of files?

The 'log' command provides a list of all the commits; indicating the changes made to the code. The message accompanying each commit describes the changes made to the previous version of the code. The actual changes to the code can be seen by using the diff command on two adjacent commits.



6) How might using version control make you more confident to make changes that could break something?

In Git, one can revert back to any version of the code using the 'checkout' command. Thus, if the current commit renders the code inexecutable or introduces a bug, one can always revert to the previous version of the code using the previous commit ID. 



7) Now that you have your workspace set up, what do you want to try using Git for?




Git commands

1) Make a copy of an entire Git repository, including the history, onto your own computer.
git clone will do this. It takes one argument - the url of the repository to copy.


2) Temporarily reset all files in a directory to their state at the time of a specific (older) commit.
git checkout will do this. It takes one argument - the commit ID to restore.
To revert back to the orignal state (i.e. to the most recent commit), type git checkout master in case you don't have the ID of the most recent commit

3) Show the commits made in this repository, starting with the most recent.
git log will do this. It doesn't take any arguments. (--stat can be used alongwith this command to get additional statistics about the commits)


4) git diff will show the difference between two commits. It takes two arguments; the older commit ID followed by the newer commit ID.
git diff considers the first argument as the "original", and the second argument as the "new" version.
To get a coloured output, type git config --global color.ui auto 


5) to set user name: git config --global user.name "user name"; to set email: git config --global user.email "user mailID"
git config --list to list all the settings Git can find at that point


Note on diff in non-git environment
Using 'diff' to demonstrate the difference between two files

In unbuntu and Mac, diff is used to list the differences between two files. 
In Windows, the corresponding command is FC, which stands for file compare

the syntax for file comaprison in Ubuntu is 

diff -u old_file new_file

remember to navigate to the folder where these files are stored. 
The -u (unified format) ensures that the output is displayed in the unified format ensuring that the output is displayed in a better format.





